--Ex1
WITH YEARLY_SPEND_CTE AS (
SELECT 
EXTRACT(YEAR FROM TRANSACTION_DATE) AS YR, PRODUCT_ID, SPEND AS CURR_YEAR_SPEND,
LAG(SPEND) OVER (PARTITION BY PRODUCT_ID 
ORDER BY PRODUCT_ID,
EXTRACT(YEAR FROM TRANSACTION_DATE)) AS PREV_YEAR_SPEND 
FROM USER_TRANSACTIONS)

SELECT YR, PRODUCT_ID, CURR_YEAR_SPEND, PREV_YEAR_SPEND, 
ROUND(100 * (CURR_YEAR_SPEND - PREV_YEAR_SPEND)/ PREV_YEAR_SPEND, 2) AS YOY_RATE 
FROM YEARLY_SPEND_CTE

--Ex2
WITH CARD_LAUNCH AS (
SELECT CARD_NAME, ISSUED_AMOUNT, MAKE_DATE(ISSUE_YEAR, ISSUE_MONTH, 1) AS ISSUE_DATE,
MIN(MAKE_DATE(ISSUE_YEAR, ISSUE_MONTH, 1)) OVER (
PARTITION BY CARD_NAME) AS LAUNCH_DATE
FROM MONTHLY_CARDS_ISSUED)

SELECT CARD_NAME, ISSUED_AMOUNT
FROM CARD_LAUNCH
WHERE ISSUE_DATE = LAUNCH_DATE
ORDER BY ISSUED_AMOUNT DESC

--Ex3
WITH TRANS_NUM AS (
SELECT USER_ID, SPEND, TRANSACTION_DATE, 
ROW_NUMBER() OVER (
PARTITION BY USER_ID ORDER BY TRANSACTION_DATE) AS ROW_NUM 
FROM TRANSACTIONS)
 
SELECT USER_ID, SPEND, TRANSACTION_DATE
FROM TRANS_NUM 
WHERE ROW_NUM = 3

--Ex4
WITH LATEST_TRANSACTION_CTE AS (
SELECT TRANSACTION_DATE, USER_ID, PRODUCT_ID, 
RANK() OVER (
PARTITION BY USER_ID 
ORDER BY TRANSACTION_DATE DESC) AS TRANSACTION_RANK 
FROM USER_TRANSACTIONS) 
  
SELECT TRANSACTION_DATE, USER_ID,
COUNT(PRODUCT_ID) AS PURCHASE_COUNT
FROM LATEST_TRANSACTION_CTE
WHERE TRANSACTION_RANK = 1 
GROUP BY TRANSACTION_DATE, USER_ID
ORDER BY TRANSACTION_DATE

--Ex5
SELECT USER_ID, TWEET_DATE,   
ROUND(AVG(TWEET_COUNT) OVER (
PARTITION BY USER_ID     
ORDER BY TWEET_DATE     
ROWS BETWEEN 2 PRECEDING AND CURRENT ROW),2) AS ROLLING_AVG_3D
FROM TWEETS

--Ex6
WITH PAYMENTS AS (
SELECT MERCHANT_ID, 
EXTRACT(EPOCH FROM TRANSACTION_TIMESTAMP - LAG(TRANSACTION_TIMESTAMP) OVER(
PARTITION BY MERCHANT_ID, CREDIT_CARD_ID, AMOUNT 
ORDER BY TRANSACTION_TIMESTAMP))/60 AS MINUTE_DIFFERENCE 
FROM TRANSACTIONS) 

SELECT COUNT(MERCHANT_ID) AS PAYMENT_COUNT
FROM PAYMENTS 
WHERE MINUTE_DIFFERENCE <= 10

--Ex7
SELECT CATEGORY, PRODUCT, TOTAL_SPEND
FROM (SELECT CATEGORY, PRODUCT, 
SUM(SPEND) AS TOTAL_SPEND,
RANK() OVER (
PARTITION BY CATEGORY 
ORDER BY SUM(SPEND) DESC) AS RANKING 
FROM PRODUCT_SPEND
WHERE EXTRACT(YEAR FROM TRANSACTION_DATE) = 2022
GROUP BY CATEGORY, PRODUCT) AS RANKED_SPENDING
WHERE RANKING <= 2 
ORDER BY CATEGORY, RANKING

--Ex8
WITH TOP_10_CTE AS (
SELECT ARTISTS.ARTIST_NAME,
DENSE_RANK() OVER (
ORDER BY COUNT(SONGS.SONG_ID) DESC) AS ARTIST_RANK
FROM ARTISTS
INNER JOIN SONGS
ON ARTISTS.ARTIST_ID = SONGS.ARTIST_ID
INNER JOIN GLOBAL_SONG_RANK AS RANKING
ON SONGS.SONG_ID = RANKING.SONG_ID
WHERE RANKING.RANK <= 10
GROUP BY ARTISTS.ARTIST_NAME)

SELECT ARTIST_NAME, ARTIST_RANK
FROM TOP_10_CTE
WHERE ARTIST_RANK <= 5
